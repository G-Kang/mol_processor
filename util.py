from __future__ import division, print_function
from numpy import *
from natsort import natsort_key
import sys,os,glob
from copy import deepcopy
from subprocess import PIPE, Popen

'''\
DESCRIPTION

This program will collect transition polarizability densities from TAPE41 generated by densf in ADF
finally print out in cube format

AUTHORS: Xing Chen
'''
def cmdline(command):
    process = Popen(args=command, stdout=PIPE, shell=True)
    return process.communicate()[0]

def parameter(data):
    data.sort()
    i=1
    index=where(data==data[0])[0]
    step=data[index[-1]+1]-data[0]
    nstep=around((data.max()-data.min())/step)+1
    return [data.min(),data.max(),int(nstep)]

def collect_rho(dname,l,comp):
    data = open(dname)
    if l%3 ==0:
        lines=int(l/3)
    else:
        lines=int(l/3+1)
    info=[]
    for i in data.readlines():
        temp=i.split()
        info.append(temp)
    rho=[]
    for i in range(len(comp)):
        key=comp[i]
        den=density(info,lines,key)
        rho.append(den)
    rho=array(rho)
    return rho

def density(info,lines,key):
    den=array([])
    for i in range(len(info)):
        if key in ' '.join(info[i]):
            for j in range(lines):
                den=append(den,[float(k) for k in info[i+2+j]])
    return den

def alpha_format(den_diff,l):
    den = zeros((l,3,3),dtype=float)
    for i in range(3):
        for j in range(3):
            den[:,j,i] = den_diff[3*i+j]
    den[:,1,0]=den[:,0,1]
    den[:,2,0]=den[:,0,2]
    den[:,2,1]=den[:,1,2]
    return den

def aatensor_format(den_diff,l):
    den = zeros((l,3,3,3),dtype=float)
    for i in range(int(den_diff.shape[0]/6)):
        n=-1
        for j in range(3):
            for k in range(j,3):
                n=n+1
                den[:,i,j,k]=den_diff[6*i+n]
        den[:,i,1,0]=den[:,i,0,1]
        den[:,i,2,0]=den[:,i,0,2]
        den[:,i,2,1]=den[:,i,1,2]
    return den

def atensor_format(den_diff,l):
    den = zeros((l,3,3,3),dtype=float)
    for i in range(int(den_diff.shape[0]/3)):
        for j in range(3):
            if i<=2: den[:,j,0,i]=den_diff[3*i+j]
            if i==3: den[:,j,1,1]=den_diff[3*i+j]
            if i==4: den[:,j,1,2]=den_diff[3*i+j]; den[:,j,2,1]=den_diff[3*i+j]
            if i==5: den[:,j,2,2]=den_diff[3*i+j]
            den[:,j,1,0]=den[:,j,0,1]
            den[:,j,2,0]=den[:,j,0,2]
    return den

def ctensor_format(den_diff,l):
    den = zeros((l,3,3,3,3),dtype=float)
    for i in range(int(den_diff.shape[0]/6)):
        n=-1
        for j in range(3):
            for k in range(j,3):
                n=n+1
                if i==0: 
                    den[:,j,k,0,0]=den_diff[6*i+n]
                    den[:,k,j,0,0]=den_diff[6*i+n]
                if i==1: 
                    den[:,j,k,0,1]=den_diff[6*i+n]
                    den[:,j,k,1,0]=den_diff[6*i+n]
                    den[:,k,j,0,1]=den_diff[6*i+n]
                    den[:,k,j,1,0]=den_diff[6*i+n]
                if i==2:
                    den[:,j,k,0,2]=den_diff[6*i+n]
                    den[:,j,k,2,0]=den_diff[6*i+n]
                    den[:,k,j,0,2]=den_diff[6*i+n]
                    den[:,k,j,2,0]=den_diff[6*i+n] 
                if i==3: 
                    den[:,j,k,1,1]=den_diff[6*i+n] 
                    den[:,k,j,1,1]=den_diff[6*i+n]
                if i==4: 
                    den[:,j,k,1,2]=den_diff[6*i+n]
                    den[:,j,k,2,1]=den_diff[6*i+n]
                    den[:,k,j,1,2]=den_diff[6*i+n]
                    den[:,k,j,2,1]=den_diff[6*i+n]
                if i==5: 
                    den[:,j,k,2,2]=den_diff[6*i+n]
                    den[:,k,j,2,2]=den_diff[6*i+n]
    return den


def read_coordinates(xyzfile):
    return loadtxt(xyzfile, skiprows=2, usecols=(1, 2, 3), dtype=float)

def write_cube(xyz,xpara,ypara,zpara,density,name):
    ANGSTROM2BOHR = 1.8897261328856432
    coords = ANGSTROM2BOHR*xyz
    atmNum = 6
    natoms = coords.shape[0]

    # xpara=[xlim,xmax,nstep]
    xstep=(xpara[1]-xpara[0])/(xpara[2]-1)
    ystep=(ypara[1]-ypara[0])/(ypara[2]-1)
    zstep=(zpara[1]-zpara[0])/(zpara[2]-1)

    f = open(name, 'w')
    print('DRAWING CUBE FILE', file=f)
    print('OUTER LOOP: X, MIDDLE LOOP: Y, INNER LOOP: Z', file=f)
    print('{0:4d}{1:12.6f}{2:12.6f}{3:12.6f}'.format(natoms, xpara[0], ypara[0], zpara[0]), file=f)
    print('{0:4d}{1:12.6f}{2:12.6f}{3:12.6f}'.format(xpara[2], xstep, 0.0, 0.0), file=f)
    print('{0:4d}{1:12.6f}{2:12.6f}{3:12.6f}'.format(ypara[2], 0.0, ystep, 0.0), file=f)
    print('{0:4d}{1:12.6f}{2:12.6f}{3:12.6f}'.format(zpara[2], 0.0, 0.0, zstep), file=f)
    for i in xrange(natoms):
        print('{0:4d}{1:12.6f}{2:12.6f}{3:12.6f}{4:12.6f}'.format(int(atmNum), 0.0, coords[i,0], coords[i,1], coords[i,2]), file=f)

    t = 0
    for i in range(xpara[2]):
        for j in range(ypara[2]):
            for k in range(zpara[2]):
                print('{0:< 13.5E}'.format(density[i,j,k]),end='', file=f)
                if (t % 6 == 5):
                    print('\n', end='', file=f)
                t += 1
    print('\n', end='', file=f)
