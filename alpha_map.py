#!/usr/bin/python

from util import *
import sys,os,glob
from vibrations import *
from mol_assign import *
from numpy import *
from copy import deepcopy

'''\
DESCRIPTION

This program will collect transition polarizability densities from TAPE41 generated by densf in ADF
finally print out in cube format

AUTHORS: Xing Chen
'''
fxyz=raw_input("Coordinates (*.xyz):  ")
xyz=read_coordinates(fxyz)
out, prog = open_mol(fxyz, 'xyz')
out.read_atoms()

## collect data 
# figure out the types of tensors

vibs = VibAll(prog='adf',nrsfile=' ')
freq = raw_input("Frequency as written in output name:")

norm = 0.0
for v in vibs.modes:
    if v.freq == float(freq):
	v.norm_mode(out.atoms)
	norm = v.norm

if norm == 0.0:
    print 'Frequency not found'
    sys.exit(-1)
    
os.system("tar -zxvf mode{0}m.tar.gz".format(freq))
os.system("tar -zxvf mode{0}p.tar.gz".format(freq))

base = "mode"+freq
mdir = base+"m"
pdir = base+"p"

os.mkdir(base)
os.system("cp {0}/TAPE41 {1}/{0}.t41".format(mdir,base))
os.system("cp {0}/TAPE41 {1}/{0}.t41".format(pdir,base))

tape_m = base+'m.t41'
tape_p = base+'p.t41'
os.chdir(base)

os.system("pkf {0} > keys".format(tape_m))
keyword = open('keys')
damp,quad,real = False, False, False
kd=[]
for i in keyword.readlines():
    for j in i.split():
        kd.append(j)
if "alpha_imag" in kd:
    damp = True
if "Atensor" in kd:
    quad = True
if "alpha" in kd:
    real = True

os.system("dmpkf {0} 'x values'> xcoord".format(tape_m))
os.system("dmpkf {0} 'y values'> ycoord".format(tape_m))
os.system("dmpkf {0} 'z values'> zcoord".format(tape_m))
ln=open("xcoord")
gx=array([])
k=0
for i in ln.readlines():
    for j in i.split():
	k=k+1
	if k==5: l=int(j)
        if k>7: gx=append(gx,float(j))

ln=open("ycoord")
gy=array([])
k=0
for i in ln.readlines():
    for j in i.split():
        k=k+1
        if k>7: gy=append(gy,float(j))

ln=open("zcoord")
gz=array([])
k=0
for i in ln.readlines():
    for j in i.split():
        k=k+1
        if k>7: gz=append(gz,float(j))
DICT={}
DICT.update({'gridx': gx})
DICT.update({'gridy': gy})
DICT.update({'gridz': gz})

dx,dy,dz=deepcopy(gx),deepcopy(gy),deepcopy(gz)
xmin,xmax,xnum=parameter(dx)
ymin,ymax,ynum=parameter(dy)
zmin,zmax,znum=parameter(dz)
if l != xnum*ynum*znum: sys.exit(-1)

temp1 = ['x_','y_','z_']
temp2 = ['x','y','z']
temp3 = ["xx","xy","xz","yy","yz","zz"]
ap_comp, aat_comp,at_comp,ct_comp=[],[],[],[]
for i in range(len(temp2)):
    a=temp2[i]
    for j in range(len(temp1)):
        b=temp1[j]
        ap_comp.append(b+a)
        for k in range(j,len(temp1)):
            c=temp1[k]
            aat_comp.append(b+c+a)
            
for k in range(len(temp3)):
    a=temp3[k]
    for kk in range(len(temp1)):
        b=temp1[kk]
        at_comp.append(b+a)
        for kkk in range(kk,len(temp1)):
            c=temp1[kkk]
            ct_comp.append(b+c+a)

alpha,aatensor,atensor,ctensor = zeros((l,3,3),dtype=complex),zeros((l,3,3,3),\
dtype=complex),zeros((l,3,3,3),dtype=complex),zeros((l,3,3,3,3),dtype=complex)
#tensor collection
#fnew=tape.split('.')[0]
base='mode'+freq

if real:
    # |d{alpha}/d{q}|^2
    comp = ap_comp
    dm = base+'m-alpha.dat'
    dp = base+'p-alpha.dat'
    os.system("dmpkf {0} 'alpha' > {1}".format(tape_m,dm))
    os.system("dmpkf {0} 'alpha' > {1}".format(tape_p,dp))
    mrho = collect_rho(dm,l,comp)
    prho = collect_rho(dp,l,comp)
    drho = square(divide(subtract(prho,mrho),2*norm))
    alpha.real = alpha_format(drho,l)

    # |d{Aa}/d{q}|^2
    comp = aat_comp
    dm = base+'m-Aa.dat'
    dp = base+'p-Aa.dat'
    os.system("dmpkf {0} 'Aatensor' > {1}".format(tape_m,dm))
    os.system("dmpkf {0} 'Aatensor' > {1}".format(tape_p,dp))
    mrho = collect_rho(dm,l,comp)
    prho = collect_rho(dp,l,comp)
    drho = square(divide(subtract(prho,mrho),2*norm))
    aatensor.real = aatensor_format(drho,l)
    
if quad:
    os.system("dmpkf {0} 'Atensor' > {1}".format(tape,base+"-A.dat"))
    os.system("dmpkf {0} 'Ctensor' > {1}".format(tape,base+"-C.dat"))
if damp:
    # |d{alpha}/d{q}|^2
    comp = ap_comp
    dm = base+'m-alpha-imag.dat'
    dp = base+'p-alpha-imag.dat'
    os.system("dmpkf {0} 'alpha_imag' > {1}".format(tape_m,dm))
    os.system("dmpkf {0} 'alpha_imag' > {1}".format(tape_p,dp))
    mrho = collect_rho(dm,l,comp)
    prho = collect_rho(dp,l,comp)
    drho = square(divide(subtract(prho,mrho),2*norm))
    alpha.imag = alpha_format(drho,l)

    # |d{Aa}/d{q}|^2
    comp = aat_comp
    dm = base+'m-Aa-imag.dat'
    dp = base+'p-Aa-imag.dat'
    os.system("dmpkf {0} 'Aatensor_imag' > {1}".format(tape_m,dm))
    os.system("dmpkf {0} 'Aatensor_imag' > {1}".format(tape_p,dp))
    mrho = collect_rho(dm,l,comp)
    prho = collect_rho(dp,l,comp)
    drho = square(divide(subtract(prho,mrho),2*norm))
    aatensor.imag = aatensor_format(drho,l)

    if quad:
	os.system("dmpkf {0} 'Atensor_imag' > {1}".format(tape,base+"-A-imag.dat"))
	os.system("dmpkf {0} 'Ctensor_imag' > {1}".format(tape,base+"-C-imag.dat"))
    

alpha=alpha.reshape((xnum,ynum,znum,3,3))
aatensor=aatensor.reshape((xnum,ynum,znum,3,3,3))

#create cube file
xpara=[xmin,xmax,xnum]
ypara=[ymin,ymax,ynum]
zpara=[zmin,zmax,znum]

if real:
    fnew = "{0}-alpha-real-zz.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,alpha[:,:,:,2,2].real,fnew)
    fnew = "{0}-aatensor-real-zzz.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,aatensor[:,:,:,2,2,2].real,fnew)
    fnew = "{0}-aatensor-real-zzx.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,aatensor[:,:,:,2,2,0].real,fnew)
    fnew = "{0}-aatensor-real-zzy.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,aatensor[:,:,:,2,2,1].real,fnew)
if damp:
    fnew = "{0}-alpha-imag-zz.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,alpha[:,:,:,2,2].imag,fnew)
    fnew = "{0}-aatensor-imag-zzz.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,aatensor[:,:,:,2,2,2].imag,fnew)
    fnew = "{0}-aatensor-imag-zzx.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,aatensor[:,:,:,2,2,0].imag,fnew)
    fnew = "{0}-aatensor-imag-zzy.cube".format(base)
    write_cube(xyz,xpara,ypara,zpara,aatensor[:,:,:,2,2,1].imag,fnew)
    
os.system("rm *alpha.dat *Aa.dat keys xcoord ycoord zcoord")

